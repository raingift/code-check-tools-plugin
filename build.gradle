import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

buildscript {
    ext.kotlinVersion = '1.9.25'
    ext.androidGradlePluginVersion = '8.2.2'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
    }
}

apply plugin: 'java-library'
apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: "maven-publish"

gradlePlugin {
    plugins {
        codeQualityToolsPlugin {
            id = 'com.hermes.code.quality.tools'
            implementationClass = 'com.hermes.code.quality.tools.CodeQualityToolsPlugin'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    google()
    gradlePluginPortal()
}

configurations {
    fixtureClasspath
}

// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
tasks.getByName('pluginUnderTestMetadata').getPluginClasspath().from(configurations.fixtureClasspath)

dependencies {
    api gradleApi()

    implementation "com.android.tools.build:gradle:$androidGradlePluginVersion"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"


    fixtureClasspath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    fixtureClasspath "com.android.tools.build:gradle:$androidGradlePluginVersion"

    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
            .getModule("gradle-tooling-api-builders")
            .classpath
            .asFiles
            .first()
    testRuntimeOnly(files(toolingApiBuildersJar))
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.withType(Test).configureEach {
    testLogging {
        testLogging.exceptionFormat = 'full'
    }
}

group = GROUP
version = VERSION

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

